/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
*/

#include <mbed.h>
#include <tcMenu.h>
#include "stm32f4mbed_menu.h"

// Global variable declarations

const PROGMEM ConnectorLocalInfo applicationInfo = { "Demo mbed", "f5325e26-a7f6-40ff-876e-47afa06df532" };
Adafruit_SSD1306_Spi gfx(spi, PD_15, PF_12, PF_13, 64, 128, SSD_1306);
AdaColorGfxMenuConfig gfxConfig;
AdaFruitGfxMenuRenderer renderer;

// Global Menu Item declarations

RENDERING_CALLBACK_NAME_INVOKE(fnEditRtCall, textItemRenderFn, "Edit", -1, NO_CALLBACK)
TextMenuItem menuEdit(fnEditRtCall, 16, 16, NULL);
const AnalogMenuInfo minfoCommits = { "Commits", 15, 0xFFFF, 32767, NO_CALLBACK, 0, 0, "" };
AnalogMenuItem menuCommits(&minfoCommits, 0, &menuEdit);
RENDERING_CALLBACK_NAME_INVOKE(fnIPRtCall, ipAddressRenderFn, "IP", -1, NO_CALLBACK)
IpAddressMenuItem menuIP(fnIPRtCall, 14, NULL);
const SubMenuInfo minfoConnectivity = { "Connectivity", 13, 0xFFFF, 0, NO_CALLBACK };
RENDERING_CALLBACK_NAME_INVOKE(fnConnectivityRtCall, backSubItemRenderFn, "Connectivity", -1, NO_CALLBACK)
BackMenuItem menuBackConnectivity(fnConnectivityRtCall, &menuIP);
SubMenuItem menuConnectivity(&minfoConnectivity, &menuBackConnectivity, &menuCommits);
const FloatMenuInfo minfoAvgTemp = { "Avg Temp", 12, 0xFFFF, 1, NO_CALLBACK };
FloatMenuItem menuAvgTemp(&minfoAvgTemp, NULL);
ListRuntimeMenuItem menuCountingList(11, 10, fnCountingListRtCall, &menuAvgTemp);
extern const char* choicesItems;
RENDERING_CALLBACK_NAME_INVOKE(fnChoicesRtCall, enumItemRenderFn, "Choices", 19, NO_CALLBACK)
ScrollChoiceMenuItem menuChoices(10, fnChoicesRtCall, 0, choicesItems, 10, 4, &menuCountingList);
const SubMenuInfo minfoOther = { "Other", 9, 0xFFFF, 0, NO_CALLBACK };
RENDERING_CALLBACK_NAME_INVOKE(fnOtherRtCall, backSubItemRenderFn, "Other", -1, NO_CALLBACK)
BackMenuItem menuBackOther(fnOtherRtCall, &menuChoices);
SubMenuItem menuOther(&minfoOther, &menuBackOther, &menuConnectivity);
RENDERING_CALLBACK_NAME_INVOKE(fnRGBRtCall, rgbAlphaItemRenderFn, "RGB", 15, NO_CALLBACK)
Rgb32MenuItem menuRGB(8, fnRGBRtCall, true, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnFrequencyRtCall, largeNumItemRenderFn, "Frequency", 7, onFrequencyChanged)
EditableLargeNumberMenuItem menuFrequency(fnFrequencyRtCall, 7, 8, 0, &menuRGB);
const BooleanMenuInfo minfoPower = { "Power", 6, 6, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuPower(&minfoPower, false, &menuFrequency);
const char enumStrFoods_0[]  = "Salad";
const char enumStrFoods_1[]  = "Pasta";
const char enumStrFoods_2[]  = "Pizza";
const char enumStrFoods_3[]  = "Casserole";
const char enumStrFoods_4[]  = "Soup";
const char* const enumStrFoods[]  = { enumStrFoods_0, enumStrFoods_1, enumStrFoods_2, enumStrFoods_3, enumStrFoods_4 };
const EnumMenuInfo minfoFoods = { "Foods", 5, 4, 4, onFoodChange, enumStrFoods };
EnumMenuItem menuFoods(&minfoFoods, 0, &menuPower);
const AnalogMenuInfo minfoTenths = { "Tenths", 4, 2, 1000, onTenthsChaned, 0, 10, "tn" };
AnalogMenuItem menuTenths(&minfoTenths, 0, &menuFoods);
const SubMenuInfo minfoEditing = { "Editing", 3, 0xFFFF, 0, NO_CALLBACK };
RENDERING_CALLBACK_NAME_INVOKE(fnEditingRtCall, backSubItemRenderFn, "Editing", -1, NO_CALLBACK)
BackMenuItem menuBackEditing(fnEditingRtCall, &menuTenths);
SubMenuItem menuEditing(&minfoEditing, &menuBackEditing, &menuOther);
RENDERING_CALLBACK_NAME_INVOKE(fnRTCTimeRtCall, timeItemRenderFn, "RTCTime", -1, NO_CALLBACK)
TimeFormattedMenuItem menuRTCTime(fnRTCTimeRtCall, 2, (MultiEditWireType)EDITMODE_TIME_12H, &menuEditing);
RENDERING_CALLBACK_NAME_INVOKE(fnRTCDateRtCall, dateItemRenderFn, "RTCDate", -1, NO_CALLBACK)
DateFormattedMenuItem menuRTCDate(fnRTCDateRtCall, 1, &menuRTCTime);


// Set up code

void setupMenu() {
    menuCommits.setReadOnly(true);
    menuEdit.setReadOnly(true);
    menuIP.setReadOnly(true);

    prepareAdaMonoGfxConfigOled(&gfxConfig);
    gfx.setRotation(0);
    gfx.begin();
    renderer.setGraphicsDevice(&gfx, &gfxConfig);
    switches.initialise(internalDigitalIo(), true);
    menuMgr.initForEncoder(&renderer, &menuRTCDate, PE_2, PE_5, PE_4);
    remoteServer.begin(3333, &applicationInfo);
}
